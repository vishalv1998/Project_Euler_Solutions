""""    1. The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
"""

"""
	Author: Vishal Sundaram V
	Date: 10th July 2018
					"""
import time
start = time.time()
import math
break_loop=True#To run an infinite loop until the condition is satisfied
i=1#Initial value for triangular number(natural number start)
triangle_number=0#Store traingular number
list_of_divisors=[]#store divisors of the triangular number
while(break_loop):#run loop until condition is satisfied
	for j in range(1,i+1):
		triangle_number+=j#obtain the triangular number by adding natural numbers
	"""The below for loop works but is not optimized
	for x in range(1,triangle_number+1):
		if(triangle_number%x==0):
			list_of_divisors+=[x]#obtain all divisors for triangular number
	"""
	x=1
	#Faster way to get divisors of a number using principle concept of mathematics
	while(x<math.sqrt(triangle_number)):
		if(triangle_number%x==0):
			if(triangle_number/x==x):
				list_of_divisors+=[x]
			else:
				list_of_divisors+=[x]
				list_of_divisors+=[triangle_number/x]
		x+=1
	if(len(list_of_divisors)>500):#check for over 500 divisors
		print("The first triangle number having over 500 divisors = ",triangle_number)
		break_loop=False#End the program
	triangle_number=0
	list_of_divisors=[]
	i+=1#increment natural number count
end = time.time()
print("Code took",end - start," seconds to run.")
